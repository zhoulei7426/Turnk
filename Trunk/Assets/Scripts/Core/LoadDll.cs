using HybridCLR;
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using Unity.VisualScripting;
using UnityEngine;
using UnityEngine.Networking;

public static class LoadDllMgr
{

    static List<string> strings = new List<string>()
    {
        "GameCore",
        "MainLobby",
    };


    public static Dictionary<string, Assembly> AssemblyMap = new Dictionary<string, Assembly>();

    private static Dictionary<string, byte[]> s_assetDatas = new Dictionary<string, byte[]>();

    public static byte[] ReadBytesFromStreamingAssets(string dllName)
    {
        return s_assetDatas[dllName];
    }

    public static IEnumerator DownLoadAssets()
    {
        var assets = new List<string>
        {
            "GameCore.dll.bytes",
            "MainLobby.dll.bytes",
        }.Concat(AOTMetaAssemblyFiles);

        foreach (var asset in assets)
        {
            string dllPath = GetBundlePath(asset);
            Debug.Log($"start download asset:{dllPath}");
            UnityWebRequest www = UnityWebRequest.Get(dllPath);
            yield return www.SendWebRequest();

#if UNITY_2020_1_OR_NEWER
            if (www.result != UnityWebRequest.Result.Success)
            {
                Debug.Log(www.error);
            }
#else
            if (www.isHttpError || www.isNetworkError)
            {
                Debug.Log(www.error);
            }
#endif
            else
            {
                // Or retrieve results as binary data
                byte[] assetData = www.downloadHandler.data;
                Debug.Log($"dll:{asset}  size:{assetData.Length}");
                s_assetDatas[asset] = assetData;
            }
        }

        Init();
    }


    public static void Init()
    {
        LoadMetadataForAOTAssemblies();
        foreach (string s in strings) {
            // Editor环境下，HotUpdate.dll.bytes已经被自动加载，不需要加载，重复加载反而会出问题。
#if  !UNITY_EDITOR
        Assembly hotUpdateAss = Assembly.Load(ReadBytesFromStreamingAssets($"{s}.dll.bytes"));
#else
            // Editor下无需加载，直接查找获得HotUpdate程序集
            Assembly hotUpdateAss = System.AppDomain.CurrentDomain.GetAssemblies().First(a => a.GetName().Name == s);
#endif
            Type type = hotUpdateAss.GetType($"{s}Main");
            type.GetMethod("Run").Invoke(null, null);
            AssemblyMap.Add(s, hotUpdateAss);
        }
    }


    public static Assembly GetAssembly(string name)
    {
        Assembly assembly = null;
        AssemblyMap.TryGetValue(name, out assembly);
        return assembly;
    }


    private static List<string> AOTMetaAssemblyFiles { get; } = new List<string>()
    {
        "mscorlib.dll.bytes",
        "System.dll.bytes",
        "System.Core.dll.bytes",
    };


    /// <summary>
    /// 为aot assembly加载原始metadata， 这个代码放aot或者热更新都行。
    /// 一旦加载后，如果AOT泛型函数对应native实现不存在，则自动替换为解释模式执行
    /// </summary>
    private static void LoadMetadataForAOTAssemblies()
    {
        /// 注意，补充元数据是给AOT dll补充元数据，而不是给热更新dll补充元数据。
        /// 热更新dll不缺元数据，不需要补充，如果调用LoadMetadataForAOTAssembly会返回错误
        /// 
        HomologousImageMode mode = HomologousImageMode.SuperSet;
        foreach (var aotDllName in AOTMetaAssemblyFiles)
        {
            byte[] dllBytes = ReadBytesFromStreamingAssets(aotDllName);
            // 加载assembly对应的dll，会自动为它hook。一旦aot泛型函数的native函数不存在，用解释器版本代码
            LoadImageErrorCode err = RuntimeApi.LoadMetadataForAOTAssembly(dllBytes, mode);
            Debug.Log($"LoadMetadataForAOTAssembly:{aotDllName}. mode:{mode} ret:{err}");
        }
    }


    private static string GetBundlePath(string aotDllName)
    {
        var path = $"{Application.streamingAssetsPath}/{aotDllName}";
#if UNITY_EDITOR
        return path;
#elif UNITY_ANDROID
         if (path.StartsWith("jar:file://"))
            return path;
        else
            return string.Format("jar:file://{0}", path);
#endif
    }
}
